pdnl Process this file with autoconf to produce a configure script.
AC_INIT(src/RNumber.C)
dnl we to AC_DIVERT_PUSH/AC_DIVERT_POP these variable definitions so they
dnl are available for $ac_help expansion (don't we all *love* autoconf?)
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
#
# Making releases:
#   RNUMBER_MICRO_VERSION += 1;
#   RNUMBER_INTERFACE_AGE += 1;
#   RNUMBER_BINARY_AGE += 1;
# if any functions have been added, set RNUMBER_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set RNUMBER_BINARY_AGE and RNUMBER_INTERFACE_AGE to 0.
#
RNUMBER_MAJOR_VERSION=1
RNUMBER_MINOR_VERSION=10
RNUMBER_MICRO_VERSION=4
RNUMBER_INTERFACE_AGE=0
RNUMBER_BINARY_AGE=0
RNUMBER_VERSION=$RNUMBER_MAJOR_VERSION.$RNUMBER_MINOR_VERSION.$RNUMBER_MICRO_VERSION
dnl
AC_DIVERT_POP()dnl

AC_SUBST(RNUMBER_MAJOR_VERSION)
AC_SUBST(RNUMBER_MINOR_VERSION)
AC_SUBST(RNUMBER_MICRO_VERSION)
AC_SUBST(RNUMBER_INTERFACE_AGE)
AC_SUBST(RNUMBER_BINARY_AGE)
AC_SUBST(RNUMBER_VERSION)

VERSION=$RNUMBER_VERSION
PACKAGE=rnumber

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_CONFIG_HEADER(config.h)

#########################################################################
#  Configure arguments 
#########################################################################
AC_ARG_ENABLE(voodoo,
[  --enable-voodoo    Use Voodoo Fried Chicken spell to compile ( this only when everything else fails)],
ac_voodoo=yes
AC_MSG_RESULT("Enabling Voodoo Fried Chicken spell")
)
                
AC_ARG_ENABLE(extra-crispy,
[  --enable-extra-crispy    Roast the chicken extra-crispy (see voodoo option)],
if test "$ac_voodoo" = "yes"; then
  AC_MSG_RESULT("Extra-crispy on")
else
  AC_MSG_ERROR("Extra-crispy option can be used only with Voodoo")
fi
)
                 
AC_ARG_ENABLE(vegetarian,
[  --enable-vegetarian    The chicken will be a Tofu chicken (see voodoo option)],
if test "$ac_voodoo" = "yes"; then
  AC_MSG_RESULT("Using Tofu Chicken")
else
  AC_MSG_ERROR("Vegetarian option can be used only with Voodoo")
fi
)

# AC_ARG_ENABLE(implicit-templates,
# [  --enable-implicit-templates    Uses implicit template instantiation, which is more portable, but produces code bloat],
# AC_MSG_RESULT("Using implicitly instantiated templates."),
# AC_MSG_RESULT("Using explicitly instantiated templates.")
# TEMPLATE_CONTROL="-fno-implicit-templates -D_USE_EXPLICIT_TEMPLATES"
#)

AC_ARG_ENABLE(opt,
[  --enable-opt    Enable optimization flag (-O3), disables debug],
 CXXFLAGS="$CXXFLAGS -O3"
 AC_MSG_RESULT("Optimizing with -O3"),
 CXXFLAGS="$CXXFLAGS -g "
)

AC_ARG_ENABLE(dbg,
[  --enable-dbg    Force debugging to be enabled],
 CXXFLAGS="$CXXFLAGS -g"
 AC_MSG_RESULT("Debugging with -g"),
)

AC_ARG_ENABLE(profile,
[  --enable-profile    Enable profiling],
 PROFILE="-pg"
 AC_MSG_RESULT("Profiling with -pg"),
 PROFILE="-fPIC"
)

default_efence="/nfs/ibmoto/tools/tlv4/raptor/lib/obj.SunOS/libefence.a"

AC_ARG_ENABLE(efence,
[  --enable-efence=<location>    link test programs with electric fence. If no location
                                 is given, /nfs/ibmoto/tools/tlv4/raptor/lib/obj.SunOS/libefence
                                 is used],
 if test x$enableval = x; then
   EFENCE=$default_efence
 else
   EFENCE=$enableval
 fi
 if test -f $EFENCE; then
   AC_MSG_RESULT([using '$EFENCE' for electric fence])
 else
   AC_MSG_ERROR(electric fence could not be found as file $EFENCE)
 fi
AC_MSG_RESULT(linking with electric fence - $EFENCE),
EFENCE=""
AC_MSG_RESULT(efence will not be used)
)
AC_SUBST(EFENCE)


AM_MAINTAINER_MODE
AC_PROG_CC
AC_PROG_CPP
AM_PROG_LEX
AC_PROG_YACC

dnl add flex prefix/include to includes
AC_MSG_CHECKING( for flex prefix )

dnl set ac_flex_prefix to prefix of path to flex
dnl this was generated by running this first with
dnl AC_PREFIX_PROGRAM(flex) and then copying the
dnl output of the test from the resulting configure
dnl and hand editing it
# Extract the first word of "flex", so it can be a program name with args.
set dummy flex; ac_word=$2
case "$FLEX" in
/*)
ac_cv_path_FLEX="$FLEX" # Let the user override the test with a path.
;;
?:/*)                    
ac_cv_path_FLEX="$FLEX" # Let the user override the test with a dos path.
;;
*)
IFS="${IFS=     }"; ac_save_ifs="$IFS"; IFS=":"
ac_dummy="$PATH"
for ac_dir in $ac_dummy; do 
  test -z "$ac_dir" && ac_dir=.
  if test -f $ac_dir/$ac_word; then
    ac_cv_path_FLEX="$ac_dir/$ac_word"
    ac_flex_prefix=`echo $ac_dir|sed 's/\/bin$//'`
    break
  fi
done
IFS="$ac_save_ifs"
;;
esac
FLEX="$ac_cv_path_FLEX"
if test -n "$FLEX"; then
  echo "$ac_t""$FLEX" 1>&6
else
  echo "$ac_t""no" 1>&6
fi

dnl if test -n "$ac_cv_path_FLEX"; then
  dnl  ac_flex_prefix=`echo $ac_cv_path_FLEX|sed 's%/[^/][^/]*//*[^/][^/]*$%%'`
dnl  ac_flex_prefix=$ac_dir
dnl fi

AC_MSG_CHECKING(for FlexLexer.h in $ac_flex_prefix/include)
if test -f $ac_flex_prefix/include/FlexLexer.h
then
  AC_MSG_RESULT(found)
else
  AC_MSG_ERROR(FlexLexer.h could not be found, it is required)
fi


dnl libtool does all checks with $CC, not with $CXX
dnl maybe this should be fixed in libtool, not here
AM_PROG_LIBTOOL

dnl On FreeBSD 3.0 (and perhaps some other systems) GNU m4 is
dnl called `gm4' where `m4' is the system's own m4.
AC_CHECK_PROGS(M4, gm4 m4, m4)

dnl Check for the desktop calculator program.
AC_PATH_PROG(DCPROG,dc)
if test "x$DCPROG" = x ; then
        AC_ERROR("Could not find program DC- this is required for the regression tests.")
fi

dnl Check for the location of Perl
AC_PATH_PROG(PERLPROG,perl)
if test "x$PERLPROG" = x ; then
        AC_ERROR("Could not find perl.  Check your path to make sure that it is present.")
fi

dnl find bigloo
AC_PATH_PROG(BIGLOOPROG,bigloo)
if test "x$BIGLOOPROG" = x ; then
   AC_WARN("Could not find bigloo. Check your path to make sure it is present.")
   AC_WARN("Bigloo is available from http://www-sop.inria.fr/mimosa/fp/Bigloo/.")
   AC_WARN("Bigloo bindings will *not* be built.")
   BIGLOO=
else
   BIGLOO=bigloo
   AC_MSG_RESULT("BIGLOOPROG $BIGLOOPROG")
   BIGLOO_BINDIR=`dirname $BIGLOOPROG`
   AC_MSG_RESULT("DIR_NAME $DIR_NAME")
   BIGLOO_REVISION=`bigloo -revision`
   BIGLOO_LIBDIR=${BIGLOO_BINDIR}/../lib/bigloo/${BIGLOO_REVISION}
   AC_MSG_RESULT("BIGLOO_BINDIR $BIGLOO_BINDIR BIGLOO_LIBDIR $BIGLOO_LIBDIR")
   AC_SUBST(BIGLOO_LIBDIR)
fi
AC_SUBST([BIGLOO])
AM_CONDITIONAL(WITHOUT_BIGLOO,test x$BIGLOO = x)

dnl find swig
AC_PATH_PROG(SWIGPROG,swig)
if test "x$SWIGPROG" = x ; then
   AC_WARN("Could not find swig. Check your path to make sure it is present.")
   AC_WARN("Swig is available from http://www.swig.org/.")
   AC_WARN("Since swig is needed for the perl bindings\, the perl bindings will *not* be built.")
   PERLBINDINGS=
else
   PERLBINDINGS=perl
   AC_MSG_RESULT("SWIG $SWIGPROG")
fi
AC_SUBST([PERLBINDINGS])
AM_CONDITIONAL(WITHOUT_SWIG,test x$SWIG = x)

dnl C++ compiler feature check start here
dnl moved the c++ compiler alittle to make the basename check work right..
AC_PROG_CXX
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING(if C++ compiler uses namespaces)
AC_TRY_COMPILE(
[
#include <iostream>
namespace std{}
using namespace std;
],[
cout << "test" << endl;
],[
 ac_namespaces=yes
 AC_DEFINE(RNUMBER_CXX_HAVE_NAMESPACES)
],[
 ac_namespaces=maybe
])
AC_MSG_RESULT([$ac_namespaces]) 


if test "x$ac_namespaces" = xmaybe ; then
AC_MSG_CHECKING(if C++ has namespaces - 2nd try)
AC_TRY_COMPILE(
[
#include <iostream.h>
namespace std{}
using namespace std;
],[
cout << "test" << endl;
],[
 ac_namespaces=yes
 AC_DEFINE(RNUMBER_CXX_HAVE_NAMESPACES)
],[
 ac_namespaces=no
])
AC_MSG_RESULT([$ac_namespaces]) 

fi

AC_MSG_CHECKING(if C++ compiler supports bool (required))
AC_TRY_COMPILE(
[
],[
   bool b=true;
   bool b1=false;
],[
  ac_bool=yes
],[
  config_error=yes
  AC_WARN(bool type is not supported by your compiler)
]) 
AC_MSG_RESULT([$ac_bool])


AC_MSG_CHECKING(if C++ compiler supports mutable)
AC_TRY_COMPILE(
[
class k {       
        mutable char *c;
public:
   void foo() const { c=0; }
};
],[
],[
  ac_mutable=yes
  AC_DEFINE(RNUMBER_CXX_HAVE_MUTABLE)
],[
  ac_mutable=no
]) 
AC_MSG_RESULT([$ac_mutable])



AC_MSG_CHECKING([if C++ compiler supports const_cast<> (required)])
AC_TRY_COMPILE(
[
   class foo;
],[
   const foo *c=0;
   foo *c1=const_cast<foo*>(c);
],[
  ac_const_cast=yes
],[
  AC_WARN(C++ compiler const_cast<> does not work)
  config_error=yes
]) 
AC_MSG_RESULT([$ac_const_cast])


AC_MSG_CHECKING(if C++ compiler requires const_cast<> for C decl)
AC_TRY_COMPILE(
[
extern "C"  { void foo(int *f) {return;} };
void foo2(const int* f) { foo(f);}
],[
   const int *i;   foo2(i);
],[
  ac_const_cast_required=no
],[
  ac_const_cast_required=yes
])
AC_MSG_RESULT([$ac_const_cast_required])



AC_MSG_CHECKING(if C++ compiler supports member templates)
AC_TRY_COMPILE(
[
class foo
{
public:
  template <class T> void method(T t);
};

template <class T> void foo::method(T t) {t = 0;}
],[
],[
   ac_member_templates=yes
   AC_DEFINE(RNUMBER_CXX_HAVE_MEMBER_TEMPLATES)
   AC_MSG_RESULT([$ac_member_templates])
],[
  ac_member_templates=no
  AC_MSG_RESULT([$ac_member_templates])
  AC_MSG_WARN([Test for member templates failed. This disables some methods that requires member template support. If your compiler should support member templates, see config.log to figure out why the test failed.])
])



AC_MSG_CHECKING(if C++ compiler supports partial specialization)
AC_TRY_COMPILE(
[
template<class T, class K>
class k {       
public:
};
template<class T> class k<void,T> { };
],[
  k<float, float> b;
  k<void,void> a;
],[
  ac_partial_specialization=yes
  AC_DEFINE(RNUMBER_CXX_HAVE_PARTIAL_SPECIALIZATION)
],[
  ac_partial_specialization=no
]) 
AC_MSG_RESULT([$ac_partial_specialization])

AC_MSG_CHECKING(if C++ environment has working string class (required))
AC_TRY_LINK(
[
#include <string>
#ifdef RNUMBER_CXX_HAVE_NAMESPACES
namespace std{}
using namespace std;
#endif /* RNUMBER_CXX_HAVE_NAMESPACES */
  class foo {
  public:
    void f(const string &s);
  };
  void foo::f(const string &s) {
    f(s.c_str());
  }
],[
   foo f1;
   f1.f("test");
],[
  rnumber_string_ok=yes
],[
  rnumber_string_ok=no
  config_error=yes 
  AC_WARN(C++ compilers string support does not work)
])
AC_MSG_RESULT([$rnumber_string_ok])




AC_MSG_CHECKING(if C++ compiler has HP ambiguous template bug)
AC_TRY_COMPILE(
[
struct S
  {
     S(int) {};
     template <class T>
     S(const T& t) {typename T::foo j;};
  };

struct P {typedef int foo; };

],[
    int i;
    P p;
    S s1(i);
    S s2(p);
],[
  ac_cxx_ambiguous_templates=no
],[
  ac_cxx_ambiguous_templates=yes
  AC_DEFINE(RNUMBER_CXX_AMBIGUOUS_TEMPLATES)
])
AC_MSG_RESULT([$ac_cxx_ambiguous_templates])



AC_MSG_CHECKING(if C++ compiler has gcc anonymous union bug)
AC_TRY_RUN([
struct Bob;
struct Fred
  {
   Bob *b;
   Bob *emit()       {return b;}
   Bob *operator()() {return b;}
  };

struct Bob
  {
   int i;
   int j;
   union {
     Bob *self;
     Fred fred;
   };
   Bob():self(this) {}
  };

int main(int argc,char **argv)
  {
   Bob bob;
   return bob.fred.emit()==bob.fred();
  }
],[
  ac_gcc_au_bug=yes
  AC_DEFINE(RNUMBER_CXX_GAUB)
],[
  ac_gcc_au_bug=no
],[
  echo $ac_n "cross compiling; assumed OK... $ac_c"
  ac_gcc_au_bug=no
])
AC_MSG_RESULT([$ac_gcc_au_bug])
if test "x$ac_gcc_au_bug" = xyes ; then
  echo "Warning: Your compiler contains a very serious bug which affects"
  echo "anonymous unions.  This prevents anonymous unions from being used in"
  echo "proxies.  "
  echo "Consider upgrading to gcc 2.95."
fi

AM_CONDITIONAL(AIX, test x`uname  -s` = xAIX)

AC_MSG_CHECKING(if C++ environment provides all required features)
if test "x$config_error" = xyes ; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Your compile environment is not able to compile Rnumber. See config.log for more information of why it failed.])
fi
AC_MSG_RESULT([yes])

dnl See whether c++ lib has std exceptions
dnl this sets EXCEPTION_FILE to "local_exceptions.h" or <exceptions>
dnl GCC_STD_EXCEPTIONS
 AC_TRY_COMPILE(
 [
   #include <stdexcept>
   #include <iostream>
 ],[
   std::runtime_error ( "runtime error" );
   cout << "test" << endl;
 ],[
   STD_LIB_EXCEPTIONS=true;
   EXCEPTION_FILE="<stdexcept>"
   AC_MSG_RESULT(c++ library has standard exceptions.)
 ],[
   AC_MSG_RESULT(c++ library does not have standard exceptions local_exceptions.h will be used)
   EXCEPTION_FILE="\"local_exceptions.h\""
 ]) dnl end of AC_TRY_COMPILE


AC_SUBST(EXCEPTION_FILE)

CXXFLAGS="-Wall $CXXFLAGS $PROFILE $TEMPLATE_CONTROL"

AC_SUBST(CXXFLAGS)
AC_SUBST(PROFILE)
AC_SUBST(EXPLTEMPLATES)
AC_PROG_INSTALL
AC_STDC_HEADERS
dnl AC_ALLOCA
AC_OUTPUT([Makefile \
        rnumber-config \
        doc/Makefile \
	macros/Makefile \
	include/Makefile \
        src/rnumber_exceptions.h \
	src/rnumber_feature.h \
        src/Makefile \
	bigloo/Makefile \
	bigloo/src/Makefile \
	bigloo/src/rnumber-version.h \
	bigloo/src/rnumber/Makefile \
	bigloo/tests/Makefile \
	perl/Makefile \
	perl/src/Makefile \
	perl/tests/Makefile \
        tests/Makefile \
	tests/NumberRegress
        ], [chmod +x \
		tests/NumberRegress \
                rnumber-config ] )

