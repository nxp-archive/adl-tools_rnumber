<?xml version="1.0" encoding="ISO-8859-1" ?>

<?xml-stylesheet type="text/css" href="http://w3.somerset.sps.mot.com/resource/style/cadtool.css"?>

<!DOCTYPE cadtool SYSTEM "http://w3.somerset.sps.mot.com/resource/style/cadtool.dtd">

<cadtool>
  <name>
    RNumber
  </name>
  <general>
    <description>
    RNumber is an arbitrary-length integer class.  While the main implementation
    is in C++, bindings exist for C, Perl, and Bigloo.  What differentiates
    RNumber from many other examples of arbitrary-sized integers is that a given
    number object has a fixed size.  This makes it suitable for modeling
    hardware resources such as registers.  However, the size may be modified if
    necessary, making it more flexible than some other implementations, such as
    SystemC.
    </description>
    <keywords>
    frontend integer arbitrary-size
    </keywords>
    <customers>
    <a href="http://raptor.freescale.net">Raptor</a>
    and <a
    href="http://powerpc.sps.mot.com/projects/tools/figleaf">Figleaf</a> are
    the primary customers, though other users also exist.
    </customers>
    <support>
      <table bgcolor="#f0f0f0" fgcolor="#f0f0f0" cellpadding="5" cellspacing="0">
        <tr><td>Brian Kahne</td><td><a href="mailto:bkahne@freescale.com">bkahne@freescale.com</a></td><td>512-996-4873</td></tr>
        <tr><td>Todd Dukes</td><td><a href="mailto:tdukes@freescale.com">tdukes@freescale.com</a></td><td>512-996-4865</td></tr>
      </table>    
    </support>
    <extrainfo>
    </extrainfo>
  </general>
  <swprocess>
    <requirements>
      Requirements/enhancements are handled via two main methods:
      <ul>
        <li>Direct customer contact: We deal directly with the customers,
        gathering requirements.</li>
        <li>DDTS:  Customers submit enhancement requests via DDTS.</li>
      </ul>      
     These are then documented in the <a
     href="http://raptor.am.freescale.net/cgi-bin/viewcvs/cgi/viewcvs.cgi/tlv/rnumber/ChangeLog">ChangeLog</a>.
    </requirements>
    <design>
      Design information is mainly stored in the <a
     href="http://raptor.am.freescale.net/cgi-bin/viewcvs/cgi/viewcvs.cgi/tlv/rnumber/ChangeLog">ChangeLog</a>.
    </design>
    <implementation>
      <structure>
         The source code layout is similar to most autoconf/automake libaries:
         <ul>
            <li>Implementation code and private headers are found in the <b>src</b> directory.</li>
            <li>Public headers are found in the <b>include</b> directory.</li>
            <li>Autoconf macros are found in the <b>macros</b> directory.</li>
            <li>Regression tests are located in the <b>tests</b> directory.</li>
         </ul>
	 There are bindings for other languages in:
	 <ul>
	    <li>perl - contains bindings for perl </li>
	    <lib>bigloo - contains bindings for bigloo, an implementation of scheme.</lib>
	 </ul>
      </structure>
      <revisioncontrol>
        <p>
          RNumber uses CVS for revision control.
        </p>
        <p>
          CVSROOT:  /proj/ppctools/CVS_ROOT
        </p>
        <p>
          Project name:  tlv/rnumber
        </p>
      </revisioncontrol>
      <buildenv>
         RNumber requires:
         <ul>
         <li>gcc 3.4.3</li>
         <li>automake and autoconf (if building from CVS).</li>
         <li>swig (if building the Perl bindings).</li>
         <li>Perl 5.8.8 or higher for perl bindings.</li>
	 <li>Bigloo 2.8a or higher for bigloo bindings </li>
	 <li>Skribe 1.2e for documentation</li>
         </ul>
         <p>To build:</p>
         <ul>
            <li>Check the project out from cvs:  <b>cvs checkout tlv/rnumber</b></li>
            <li>Run autoconf/automake:  <b>./autogen.sh --prefix=[install prefix] [other options]</b></li>
            <li>Build it:  <b>make</b></li>
            <li>Run the regression:  <b>make check</b></li>
            <li>Install it:  <b>make install</b></li>
         </ul>
         <p>If you are doing development and do not want all of the headers
         installed, even if they have not changed, you can use the command
         <b>make cinstall</b>.  This will only install header files that are
         newer than the existing installed ones, or have not yet been installed.</p>
      </buildenv>
    </implementation>
    <test>
      <testplan>
         The testplan is quite simple:  If a new feature is added, add a test in
         the regression.
      </testplan>
      <regression>
         The regression is located in the <b>tests</b> directory and contains a
         test for each major feature in the library.  To run the regression,
         simply issue the command <b>make check</b>.
      </regression>
    </test>
    <documentation>
       Currently, the main source of documentation is this file and the rnumber
       header files.
    </documentation>
    <release>
      <location>
         /_TOOLS_/dist/fs-rnumber- on the GAIN network.
      </location>
      <dependencies>
         RNumber c++ library only depends upon gcc's libstdc++.
      </dependencies>
      <releaseprocess>
         To release rnumber, follow the standard procedure for releasing a
         library into /cad or /_TOOLS_.  Make sure the release is built from
         a tagged version checked out into an empty directory.  You may also 
	 use the <b>cadinstall</b> tool, which will do this all for you.
      </releaseprocess>
      <bugreporting class="CADTools" project="rnumber" software="rnumber">
        DDTS is used as the bug-reporting software.
      </bugreporting>
    </release>
  </swprocess>
</cadtool>
