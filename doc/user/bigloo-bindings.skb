(chapter :title "Bigloo (scheme) Bindings"
   (p [Only the exported functions can be called by bigloo. Currently
none of the random number generation functions are exported.])

   (section :title "Variables"
      (p [There is only one rnumber variable, ,(code
[*rnumber-version*]). This is the version of the library.]))

   (section :title "Memory Management"
      (p [If Bigloo was built with finalization enabled, Bigloo will
destroy rnumbers that were created by calling the bigloo rnumber
construction function ,(code [(rnumber-ctor ,(emph [arg]))]).]))

(section :title "Functions"
      (table
	 (tr :bg "#cccccc" (th :align 'center :colspan 3 "Exported Functions"))
	 (tr :bg "#cccccc" (th "Function")(th "Description"))

	 (tr (tdl (code [(rnumber? ,(emph [a]))]))(tdl [Returns true
if ,(code [a]) is an rnumber.]))

	 (tr (tdl (code [(rn? ,(emph [a]))]))(tdl [Alias for ,(code
[rnumber?]).]))

	 (tr (tdl (code [(rnumber-ctor ,(emph [arg]))]))(tdl
[Constructs a new rnumber based on the argument. The argument can be
null, an integer, a string, or an rnumber.]))

	 (tr (tdl (code [(rn-ctor ,(emph [arg]))]))(tdl [Alias for
,(code [rnumber-ctor])]))

	 (tr (tdl (code [(rnumber->cstr ,(emph [rnumber
. radix-prefix]))]))
	    (tdl [This converts an rnumber into its string
representation. The ,(code [radix-prefix]) are optional arguments. The
first optional argument is the radix to use, the second optional
argument is whether to include a radix prefix at the begining of the
string. For example "0x" for a hex number.]))

	 (tr (tdl (code [(rn->string ,(emph [rnumber
. radix-prefix]))]))(tdl [Alias for ,(code [rnumber->cstr])]))

	 (tr (tdl (code [(rnumber-parse-string ,(emph [str]))]))(tdl
[This parses a string representing a legal number in decimal, hex, or
binary into an rnumber. If the string does not represent an rnumber,
,(code [rnumber-parse-string]) returns #f]))

	 (tr (tdl (code [(rnumber->int ,(emph [rnumber]))]))(tdl
[Convert an rnumber to a regular integer. No warning, error, or return
code will indicate loss of data.]))

	 (tr (tdl (code [(rn->integer ,(emph [rnumber]))]))(tdl [Alias
for ,(code [rnumber->int])]))

	 (tr (tdl (code [(rn=? ,(emph [a b]))])) (tdl [Compares two
variables that represent either rnumbers or integers to see if they
hold the same integer value.]))

	 (tr (tdl (code [(rn!=? ,(emph [a b]))])(tdl [Returns ,(code
[(not (rn=? a b))])])))

	 (tr (tdl (code [(rn<? ,(emph [a b]))]))(tdl [Compares two
variables that represent either rnumbers or integers to see if the one
represented by ,(code [a]) is less than the one represented by ,(code
[b]).]))

	 (tr (tdl (code [(rn<=? ,(emph [a b]))]))(tdl [Compares two
variables that represent either rnumbers or integers to see if the one
represented by ,(code [a]) is less than or equal to the one
represented by ,(code [b]).]))

	 (tr (tdl (code [(rn>? ,(emph [a b]))]))(tdl [Compares two
variables that represent either rnumbers or integers to see if the one
represented by ,(code [a]) is greater than the one represented by
,(code [b]).]))

	 (tr (tdl (code [(rn>=? ,(emph [a b]))]))(tdl [Compares two
variables that represent either rnumbers or integers to see if the one
represented by ,(code [a]) is greater than or equal to the one
represented by ,(code [b]).]))

	 (tr (tdl (code [(rn<< ,(emph [a b]))]))(tdl [Left shift
,(code [a]) by ,(code [b]) bits. ,(code [a]) should be an
rnumber. ,(code [b]) can be either an integer or an rnumber.]))

	 (tr (tdl (code [(rn>> ,(emph [a b]))]))(tdl [Right shift
,(code [a]) by ,(code [b]) bits. ,(code [a]) should be an
rnumber. ,(code [b]) can be either an integer or an rnumber.]))

	 (tr (tdl (code [(rn- ,(emph [a b]))]))(tdl [Subtract ,(code
[b]) from ,(code [a]). ,(code [b]) and ,(code [a]) can be either
integers or rnumbers. The return value is an rnumber unless both
,(code [a]) and ,(code [b]) are integers.]))

	 (tr (tdl (code [(rn+ ,(emph [a b]))]))(tdl [Add ,(code [a])
to ,(code [b]). ,(code [b]) and ,(code [a]) can be either integers or
rnumbers. The return value is an rnumber unless both ,(code [a]) and
,(code [b]) are integers.]))

	 (tr (tdl (code [(rn* ,(emph [a b]))]))(tdl [Mutliply ,(code
[a]) by ,(code [b]). ,(code [b]) and ,(code [a]) can be either
integers or rnumbers. The return value is an rnumber unless both
,(code [a]) and ,(code [b]) are integers.]))

	 (tr (tdl (code [(rn-bitand ,(emph [a b]))]))(tdl [Return
logical bit and of ,(code [a]) and ,(code [b]). Either ,(code [a]) or
,(code [a]) may be an integer or an rnumber.]))

	 (tr (tdl (code [(rn-bitxor ,(emph [a b]))]))(tdl [Return
logical bit xor of ,(code [a]) and ,(code [b]). Either ,(code [a]) or
,(code [a]) may be an integer or an rnumber.]))

	 (tr (tdl (code [(rn-bitnot ,(emph [a]))]))(tdl [Return
logical bit not of ,(code [a]).  ,(code [a]) may be an integer or an
rnumber.]))

	 (tr (tdl (code [(rn-bitor ,(emph [a b]))]))(tdl [Return
logical bit or of ,(code [a]) and ,(code [b]). Either ,(code [a]) or
,(code [b]) must be an rnumber. Both can not be integers.]))
	 
	 (tr (tdl (code [rn-sign-extend! ,(emph [rn bit])]))
	    (tdl [Sign extends the rnumber ,(code [rn]) from the bit
given by ,(code [bit]). ,(code [rn]) must be an RNumber and ,(code
[bit]) must be an integer. ,(code [bit]) is the big-endian bit from
which to sign-extend. This function returns #t if there are no
errors.]))

	 (tr (tdl (code [rn-get-bit ,(emph [rn bit])]))
	    (tdl [Returns an integer of the bit-value in the rnumber
at bit ,(emph [bit]). ,(code [rn]) must be an RNumber, ,(code [bit])
must be an integer. This function indexes into the RNumber with
big-endian notation (ie. bit 0 is most significant)]))

	 (tr (tdl (code [rn-get-bit-lsb ,(emph [rn bit])]))
	    (tdl [Returns an integer of the bit-value in the rnumber
at bit ,(emph [bit]). ,(code [rn]) must be an RNumber, ,(code [bit])
must be an integer. This function indexes into the RNumber with
little-endian notation (ie. bit 0 is least significant)]))

	 (tr (tdl (code [rn-set-bit! ,(emph [rn bit value])]))
	    (tdl [Sets the bit in the rnumber at ,(code [bit]) to the
value of ,(code [value]). ,(code [rn]) must be an RNumber, ,(code
[bit]) and ,(code [value]) must be integers. ,(code [bit]) indexes
into the RNumber with bit-endian notation (ie. bit 0 is most
significant). This function returns ,(code [#t]) if there are no
errors.]))

	 (tr (tdl (code [rn-set-bit-lsb! ,(emph [rn bit value])]))
	    (tdl [Sets the bit in the rnumber at ,(code [bit]) to the
value of ,(code [value]). ,(code [rn]) must be an RNumber, ,(code
[bit]) and ,(code [value]) must be integers. ,(code [bit]) indexes
into the RNumber with little-endian notation (ie. bit 0 is least
significant). This function returns ,(code [#t]) if there are no
errors.]))

	 (tr (tdl (code [rn-resize! ,(emph [rn new-size])]))
	    (tdl [Resizes the number to be ,(code [new-size])
bits. ,(code [rn]) must be an RNumber and ,(code [new-size]) must be
an integer. The function returns ,(code [new-size]) if there are no
errors.]))

	 (tr (tdl (code [rn-size ,(emph [rn])]))
	    (tdl [Returns an integer representation of the bit-width
of the RNumber. ,(code [rn]) must be an RNumber.]))

	 (tr (tdl (code [rn-word-count ,(emph [rn])]))
	    (tdl [Returns an integer representation of the number of
words of memory with RNumber uses to store its number. ,(code [rn])
must be an RNumber.])))))

