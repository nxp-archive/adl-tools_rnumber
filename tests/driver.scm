(module
 test
 (library bl-rnumber)
 (main main)
 (extern
  (environ::string* "environ")
  (pipe::int (int-array-2) "pipe")
  (close::int (int) "close")
  (fork::pid_t () "fork")
  (execl::int (string string . string) "execl")
  (execlp::int (string string . string) "execlp")
  (execv::int (string int**) "execv")
  (execvp::int (string int**) "execvp")
  (getpid::pid_t () "getpid")
  (getppid::pid_t () "getppid")
  (_write::ssize_t (int string size_t) "write")
  (type pid_t int "pid_t")
  (type ssize_t int "ssize_t")
  (type size_t long "size_t")
  (type string* (pointer string) "char **")
  (type int-array-2 (array int) "int $[ 2 ]")
  (type int-array-2->int "int ($(int [ 2 ]))")
  (type void->pid_t "pid_t ($(void))")
  (type string,string,...string->int "int ($(char *,char *,...))")
  (type int* (pointer int) "int *")
  (type int*-array (array int*) "int *$[  ]")
  (type int** (pointer int*) "int **")
  (type string,int**->int "int ($(char *,int **))")))

(define-macro(push! stack o)
  `(let((_obj ,o))
     (set! ,stack(cons _obj ,stack))
     _obj))

(define (main argv)
  (let ((in '()))
    (args-parse
     (cdr argv)
     (section #"Help")
     ((#"--version"
       (help #"Print version info and exit"))
      (print #"driver")
      (exit 0))
     (((#"-h" #"--help")
       (help #"Print this help message and exit"))
      (args-parse-usage #f)
      (exit 0))
     (section #"Options")
     (((#"-I" #"--include")
       ?dir
       (synopsis #"Add  to load file search path"))
      (push! *load-path* dir))
     (else (push! in else)))
    (if (null? in)
	(repl)
	(let ((args (reverse in)))
	  (set! *the-command-line* args)
	  (loadq (car args))))))
