;
; Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
;
; You may distribute under the terms of the Artistic License, as specified in
; the COPYING file.
;

(module simple-number-test
   (library bl-rnumber)
   (main simple-number-test))

(define (do-tests a b)
   (print "a " a " b " b)
   (print "<pretty print>")
   (pp a)
   (print "</pretty print>")
   (print "a=" (rnumber->cstr a 16) " b=" (rnumber->cstr b 16))
   (print "a=" (rnumber->cstr a 10) " b=" (rnumber->cstr b 10))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn=?  "  (rn=? a b))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn!=? " (rn!=? a b))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn<?  "  (rn<? a b))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn<=? " (rn<=? a b))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn>?  "  (rn>? a b))
   (print "a=" (rnumber->cstr a) " b=" (rnumber->cstr b) " rn>=? " (rn>=? a b)))

(define (real-main argv)
   (print "create from int")
   (let ((a (rnumber-ctor 10))
         (b (rnumber-ctor 15)))
      (do-tests a b))

   (print "create from string")
   (let ((a (rnumber-ctor "10"))
         (b (rnumber-ctor "15")))
      (do-tests a b))

   (print "equal numbers")
   (let ((a (rnumber-ctor "10")))
      (do-tests a a))

   (let ((a (rnumber-ctor "10"))
         (b (rnumber-ctor "0xff"))
         (c (rnumber-ctor "0xff")))
      (print "default print: a " a)
      (print "rnumber->cstr: a " (rnumber->cstr a))
      (print "rnumber->cstr radix: a " (rnumber->cstr a 16))
      (print "radix with prefix: a " (rnumber->cstr a 16 #t))
      (print "radix w/out prefix: a " (rnumber->cstr a 16 #f))
      (print "b " (rnumber->cstr b))
      (print "c " (rnumber->cstr c))
      (print "a = b " (equal? a b))
      (print "b = c " (equal? b c))
      (print "a = 10 " (equal? a 10))
      (print "10 = a "  (equal? 10 a))
      (print "parse from string qtv -> " (rnumber-parse-string "qtv"))
      (print "parse from string \"10\" -> " (rnumber-parse-string "10"))
      (print "5 - 3 -> " (rn- (rnumber-ctor 5) (rnumber-ctor "3")))
      (let ((sign-extended (rn-ctor "0x8000")))
         (rn-sign-extend! sign-extended 16)
         (print "(rn-sign-extend! 0x8000 16 " sign-extended ")")
         (print "(rn-get-bit 0x8000 16 " (rn-get-bit (rn-ctor "0x8000") 16) ")")
         (print "(rn-get-bit 0x8000 15 " (rn-get-bit (rn-ctor "0x8000") 15) ")")
         (print "(rn-get-bit-lsb 0x8000 16 " (rn-get-bit-lsb (rn-ctor "0x8000") 16) ")")
         (print "(rn-get-bit-lsb 0x8000 15 " (rn-get-bit-lsb (rn-ctor "0x8000") 15) ")")
         (set! a (rn-ctor "0"))
         (rn-set-bit! a 1 1)
         (print "(a after set-bit! 1 1 " a ")")
         (rn-set-bit! a 1 0)
         (print "(a after set-bit! 1 0 " a ")")
         (rn-set-bit-lsb! a 1 1)
         (print "(a after set-bit-lsb! 1 1 " a ")")
         (rn-set-bit-lsb! a 1 0)
         (print "(a after set-bit-lsb! 1 1 " a ")")
         (print "(size a " (rn-size a)")")
         (rn-resize! a 128)
         (print "(size a after resize 128 " (rn-size a)")(word-count " (rn-word-count a) ")")
         (rn-set-bit-lsb! a 5 1)
         (print "(a after set-lsb 5 1 " a ")")
         (rn-sign-extend! a (- (rn-size a) (+ 5 1)))
         (print "(a after big sign extend " a ")"))))
         
(define (simple-number-test args)
  (let ((rnumber-version *rnumber-version*))
                  (real-main args)))
